#!/usr/bin/perl -w

use strict;
use Getopt::Long;
use Pod::Usage;
use Cwd;
use FindBin;
use lib "$FindBin::Bin";

my $man = 0;
my $help = 0;
my $index = "";
my $out = "";
my $loci = "";
my $ref = "/data/local/ref/karma.ref/human.g1k.v37.fa";
my $maxDepth = 255;
my $ignoreMQ = "";
my $ignoreCycle = "";
my $run = -1;
my $restart = "";
my $samtools = "/usr/cluster/bin/samtools";
my $bamutil = "/usr/cluster/bin/bam";
my $tabix = "/usr/cluster/bin/tabix";
my $bgzip = "/usr/cluster/bin/bgzip";
my $mosixNodes = "";
my $viewParam = "-q 20 -F 0x0704";
my $baqParam = "-AEbr";
my $region = "";
my $clipOverlap = "";

## Parse options and print usage if there is a syntax error,
## or if usage was explicitly requested.
GetOptions("help|?" => \$help, 
	   "man" => \$man,
	   "index=s",\$index,
	   "out=s",\$out,
	   "loci=s",\$loci,
	   "ref=s",\$ref,
	   "max-depth=i",\$maxDepth,
	   "ignore-MQ",\$ignoreMQ,
	   "ignore-cycle",\$ignoreCycle,
	   "samtools=s",\$samtools,
	   "bamutil=s",\$bamutil,
	   "tabix=s",\$tabix,
	   "bgzip=s",\$bgzip,
	   "mosix-nodes=s",\$mosixNodes,
	   "view-param=s",\$viewParam,
	   "baq-param=s",\$baqParam,
	   "region=s",\$region,
	   "run=i",\$run,
	   "restart",\$restart,
	   "clip-overlap",\$clipOverlap,
    ) || pod2usage(2);

pod2usage(1) if $help;

pod2usage(-verbose => 2) if $man;

my $bindir = "$FindBin::Bin";

unless ( ( $loci ) && ($ref ) && ( $index ) && ( $out ) ) {
    print STDERR "ERROR: Missing required option\n";
    pod2usage(2);
}

my @ids = ();
my @bams = ();
my $icut = 1;
open(IN,$index) || die "Cannot open file\n";
while(<IN>) {
    next if ( /^#/ );
    my @F = split;
    if ( $#F == 1 ) {
	push(@ids,$F[0]);
	push(@bams,$F[1]);
    }
    elsif ( $#F == 5 ) {
	$icut = 2;
	push(@ids,$F[1]);
	push(@bams,$F[$#F]);
    }
    else {
	die "Expected number of columns are 2 or 5\n";
    }

    ## check if required files exist
    die "Cannot open $F[$#F] for reading\n" unless ( -s $F[$#F] );
}
close IN;

open(MAK,">$out.Makefile") || die "Cannot open file\n";
print MAK ".DELETE_ON_ERROR:\n\n";
print MAK "all: $out.ped\n\n";
print MAK "$out.ped:";
for(my $i=0; $i < @ids; ++$i) {
    print MAK " $out.$ids[$i].txt.gz.tbi";
}
print MAK "\n";
print MAK "\t(echo \"#FAM_ID\tIND_ID\tFAT_ID\tMOT_ID\tSEX\tMPU\"; cut -f $icut $index | perl -lane 'print join(\"\\t\",\$\$F[0],\$\$F[0],0,0,0,\"$out.\".\$\$F[0].\".txt.gz\")') > $out.ped\n\n";
for(my $i=0; $i < @ids; ++$i) {
    print MAK "$out.$ids[$i].txt.gz.tbi: $bams[$i]\n";
    my $cmd = "set -o pipefail; $samtools view $viewParam -uh $bams[$i] $region | ".($baqParam ? "$samtools calmd -AEbr - $ref | " : "").($clipOverlap ? "$bamutil clipOverlap --in -.bam --out -.ubam | " : "")." $samtools mpileup ".($ignoreMQ ? "" : " -s").($ignoreCycle ? "" : " -O")." -f $ref -d $maxDepth -l $loci - | $bgzip -c > $out.$ids[$i].txt.gz";
    print MAK "\t".&mosixCmd("$cmd",$mosixNodes)."\n";
    print MAK "\t".&mosixCmd("$tabix -f -s 1 -b 2 -e 2 $out.$ids[$i].txt.gz",$mosixNodes)."\n\n";
}
close MAK;

print "Finished generating CAPT Makefile\n";
if ( $run < 0 ) {
    print "CAPT will run the with the following commond:\n";
    print "\tmake -f $out.Makefile -j [# of parallel jobs]\n";
    print "Or perform sanity checking using the following command:\n";
    print "\tmake -f $out.Makefile -n\n";
}
elsif ( $run == 0 ) {
    print "Running maximum parallel jobs of CAPT\n";
    my $cmd = "make -f $out.Makefile -j ".(($restart) ? " -B" : "");
    print "$cmd\n";
    print `$cmd`;
}
else {
    print "Running $run parallel jobs of CAPT\n";
    my $cmd = "make -f $out.Makefile -j $run".(($restart) ? " -B" : "");
    print "$cmd\n";
    print `$cmd`;
}

sub mosixCmd {
    my ($cmd,$nodes) = @_;
    if ( $nodes ) { return "mosbatch -E/tmp -j$nodes bash -c '$cmd'"; }
    else { return $cmd; }
}

__END__

=head1 NAME

capt pileup - Perform pileup for contamination-aware genotyping

=head1 SYNOPSIS

capt pileup [options] 

 Required Options (Run epacts single -man or see wiki for more info):
   -loci STR         Input genomic position to perform pileup
   -index STR        Index file containing sample IDs and BAM file path
   -out STR          Output prefix

 Key Options (Run capt pileup -man or see wiki for more info):
   -help             Print out brief help message [OFF]
   -man              Print the full documentation in man page style [OFF]
   -ref STR          Reference FASTA file [/data/local/ref/karma.ref/human.g1k.v37.fa]
   -max-depth INT    Maximum depth to pile up
   -ignore-MQ        Do not report mapping quality
   -ignore-cycle     Do not report the read cycle
   -samsools STR     The full path of samtools binary [/usr/cluster/bin/samtools]
   -bgzip STR        The full path of bgzip binary [/usr/cluster/bin/bgzip]
   -tabix STR        The full path of bgzip binary [/usr/cluster/bin/tabix]
   -mosix-nodes STR  Comma separated list of mosix nodes
   -view-param STR   Parameter for samtools view [-q 20 -F 0x0704]
   -baq-param STR    Parameter for samsools calmd (for BAQ) [-AEbr]
   -clip-overlap STR Clip overlapping read fragments
   -run INT          Number of jobs to run in parallel []
   -restart          Restart jobs ignoring the previous outputs [OFF]

=head1 CAPT WIKI DOCUMENTASTION

 Visit http://genome.sph.umich.edu/wiki/CAPT for detailed documentation

=head1 OPTIONS

=over 8

=item B<-help>

Print a brief help message and exits.

=item B<-man>

Prints the manual page and exits.

=item B<-vcf> STR (Required)

Input VCF file, which must be tabixed and bgzipped. See B<EPACTS wiki> or http://samtools.sourceforge.net/tabix.shtml for detailed information. When -sepchr option is specified, B<-vcf> argument must point the chr1 file.

=item B<-out> STR (Required)

EPACTS output kinship file name

=item B<-ped> STR

Input PED file containing phenotype and covariate information. It accepts PED file format used in PLINK or MERLIN software. Only second column containing the individual IDs will be important. If omitted, all the individuals in the VCF files will be used for calculating kinship

=item B<-field> STR

VCF's FORMAT field entry to extract the genotype or dosage information. By default, 'GT' is used. If 'PL' or 'GL' field is specified, the genotype likelihoods will be converted into genotype dosages whenever needed. Note that using 'PL' or 'GL' may not create ideal kinship matrix

=item B<-unit> INT

The number of base pairs to be used as a unit of parallelization. Default value is 10,000,000 (10Mb).

=item B<-sepchr> 

Indicator that the VCF files are separated by chromosomes. It assumes that the VCF files are named as [prefix].chr1.[suffix], [prefix].chr2.[suffix], and so on. If B<-sepchr> is specified, B<-vcf> argument must point to the file corresponding to chr1.

=item B<-run> INT

Run EPACTS immediately by invoking 'make' command, with specified number of CPUs. By default, this option is turned off and the user needs to invoke 'make' command by themselves.

=item B<-min-maf> FLT

Minimum minor allele frequency (MAF) threshold to run single variant association test. 

=item B<-min-callrate> FLT

Minimum call rate, which is the proportion of non-missing genotypes, to run single variant association test

=item B<-chr> STR

Run only a specific chromosome

=item B<-pass>

Use only variants with 'PASS' in the FILTER column in the VCF

=item B<-restart>

Ignore intermediate results and restart from the scratch

=item B<-nodes> STR

Comma-separated list of MOSIX cluster nodes. By default, MOSIX will not be used.

=back

=head1 DESCRIPTION

B<epacts> is an efficient and flexible software pipelien for sequence-based
genetic analysis. It takes VCF-formatted file as input and performs a wide
variety of single variant and buden test. 

Visit http://genome.sph.umich.edu/wiki/EPACTS for more detailed documentation

=cut
