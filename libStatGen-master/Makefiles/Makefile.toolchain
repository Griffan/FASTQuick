#
# This file allows us to create windows
# 32 and 64 bit binaries instead of binaries
# for the compiling host.  It assumes that the
# GNU compiler suite is the compiler for all
# three targets.
#
# TARGET is a bit of a misnomer.  The goal is
# really to allow different toolchains to be used
# to build the system.
#
# Supported TARGET values include:
#
# mingw32
# mingw64 (except c++, so mostly not)
# llvm
# clang
#
# Typical use is to say at the toplevel:
#   make
#   or
#   make TARGET=mingw32
#   or
#   make TARGET=mingw64
#
# But you can also just set it here:
#
# TARGET=mingw32

ifeq ($(TARGET),mingw)
	TARGET=mingw32
endif

TOOLCHAIN_DIR=

ifeq ($(TARGET), mingw32)
TOOLCHAIN_PREFIX=i586-mingw32msvc-
else ifeq ($(TARGET), mingw64)
TOOLCHAIN_PREFIX=amd64-mingw32msvc-
else ifeq ($(TARGET),llvm)
TOOLCHAIN_PREFIX=llvm-
else
TOOLCHAIN_PREFIX=
endif

UNAME:=$(shell uname)
UNAME_LIBS:=
ifeq ($(UNAME:MINGW32%=MINGW32),MINGW32)
        UNAME_LIBS=-lwsock32
endif

# CPP0X=-std=c++0x

CXX     = $(TOOLCHAIN_DIR)$(TOOLCHAIN_PREFIX)g++ $(CPP0X)
CC      = $(TOOLCHAIN_DIR)$(TOOLCHAIN_PREFIX)gcc
LD      = $(TOOLCHAIN_DIR)$(TOOLCHAIN_PREFIX)ld
AR      = $(TOOLCHAIN_DIR)$(TOOLCHAIN_PREFIX)ar
RANLIB  = $(TOOLCHAIN_DIR)$(TOOLCHAIN_PREFIX)ranlib
OBJCOPY = $(TOOLCHAIN_DIR)$(TOOLCHAIN_PREFIX)objcopy
OBJDUMP = $(TOOLCHAIN_DIR)$(TOOLCHAIN_PREFIX)objdump
STRIP   = $(TOOLCHAIN_DIR)$(TOOLCHAIN_PREFIX)strip
NM      = $(TOOLCHAIN_DIR)$(TOOLCHAIN_PREFIX)nm
SIZE    = $(TOOLCHAIN_DIR)$(TOOLCHAIN_PREFIX)size
CPP     = $(TOOLCHAIN_DIR)$(TOOLCHAIN_PREFIX)cpp
AS      = $(TOOLCHAIN_DIR)$(TOOLCHAIN_PREFIX)as
F77     = $(TOOLCHAIN_DIR)$(TOOLCHAIN_PREFIX)gfortran

# 
# clang is a drop in replacement for c++ and cc:
#
ifeq ($(TARGET), clang)
CXX=clang
CC=clang
endif

CCVERSION = $(shell $(CC) -dumpversion )

EXPORT_TOOLCHAIN="export RANLIB=$(RANLIB); export AR=$(AR); export CC='$(CC)'; export CXX='$(CXX)'; export LD=$(LD); export CCVERSION=$(CCVERSION)"
